pipeline {
    agent {
        docker {
            image 'node:18-alpine'
            args '-u root:root'
            reuseNode true
        }
    }
    
    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
        TELEGRAM_BOT_TOKEN = credentials('telegram-bot-token')
        TELEGRAM_CHAT_ID = credentials('telegram-chat-id')
        DOCKER_REGISTRY = 'ilia2014a'  // –≤–∞—à DockerHub username
        APP_VERSION = "${env.BUILD_NUMBER}"
    }
    
    options {
        timeout(time: 30, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '10'))
        disableConcurrentBuilds()
    }
    
    stages {
        stage('Notify Start') {
            steps {
                script {
                    sendTelegramNotification("üöÄ Build Started", "green")
                }
            }
        }
        
        stage('Checkout & Setup') {
            steps {
                checkout scm
                sh '''
                    echo "=== Build Environment ==="
                    echo "Build: ${BUILD_NUMBER}"
                    echo "Branch: ${GIT_BRANCH}"
                    echo "Commit: ${GIT_COMMIT}"
                    echo "Node: $(node --version)"
                    echo "NPM: $(npm --version)"
                    echo "Docker: $(docker --version)"
                '''
            }
        }
        
        stage('Install Dependencies') {
            parallel {
                stage('Backend Dependencies') {
                    steps {
                        dir('backend') {
                            sh 'npm ci'
                        }
                    }
                }
                stage('Frontend Dependencies') {
                    steps {
                        dir('frontend') {
                            sh 'npm ci'
                        }
                    }
                }
            }
        }
        
        stage('Run Tests') {
            parallel {
                stage('Backend Tests') {
                    steps {
                        dir('backend') {
                            sh 'npm test || true'  # || true –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –µ—Å–ª–∏ —Ç–µ—Å—Ç–æ–≤ –Ω–µ—Ç
                        }
                    }
                }
                stage('Frontend Tests') {
                    steps {
                        dir('frontend') {
                            sh 'npm test -- --watchAll=false || true'
                        }
                    }
                }
            }
        }
        
        stage('Build Frontend') {
            steps {
                dir('frontend') {
                    sh 'npm run build'
                    sh 'ls -la dist/'
                }
            }
        }
        
        stage('Build Docker Images') {
            steps {
                script {
                    // Build and tag frontend
                    sh """
                        docker build -t ${DOCKER_REGISTRY}/calculator-frontend:${APP_VERSION} ./frontend
                        docker tag ${DOCKER_REGISTRY}/calculator-frontend:${APP_VERSION} ${DOCKER_REGISTRY}/calculator-frontend:latest
                    """
                    
                    // Build and tag backend
                    sh """
                        docker build -t ${DOCKER_REGISTRY}/calculator-backend:${APP_VERSION} ./backend
                        docker tag ${DOCKER_REGISTRY}/calculator-backend:${APP_VERSION} ${DOCKER_REGISTRY}/calculator-backend:latest
                    """
                }
            }
        }
        
        stage('Security Scan') {
            steps {
                script {
                    // –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤ –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ (—Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π trivy)
                    sh 'docker scan ${DOCKER_REGISTRY}/calculator-frontend:${APP_VERSION} || echo "Scan skipped - trivy not installed"'
                    sh 'docker scan ${DOCKER_REGISTRY}/calculator-backend:${APP_VERSION} || echo "Scan skipped - trivy not installed"'
                }
            }
        }
        
        stage('Push to DockerHub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh '''
                            echo "${DOCKER_PASS}" | docker login -u "${DOCKER_USER}" --password-stdin
                            
                            docker push ${DOCKER_REGISTRY}/calculator-frontend:${APP_VERSION}
                            docker push ${DOCKER_REGISTRY}/calculator-backend:${APP_VERSION}
                            docker push ${DOCKER_REGISTRY}/calculator-frontend:latest
                            docker push ${DOCKER_REGISTRY}/calculator-backend:latest
                            
                            docker logout
                        '''
                    }
                }
            }
        }
        
        stage('Deploy to Staging') {
            steps {
                script {
                    sh '''
                        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
                        docker-compose down || true
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–∑—ã
                        docker-compose pull || true
                        
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                        docker-compose up -d
                        
                        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
                        sleep 30
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
                        curl -f http://localhost:3001/health || exit 1
                        curl -f http://localhost:3000 || exit 1
                    '''
                }
            }
        }
        
        stage('Smoke Tests') {
            steps {
                script {
                    sh '''
                        echo "Running smoke tests..."
                        
                        # Test backend API
                        curl -f -X POST http://localhost:3001/calculate \
                          -H "Content-Type: application/json" \
                          -d '{"expression":"2+2"}' || exit 1
                          
                        # Test frontend availability
                        curl -f http://localhost:3000 || exit 1
                        
                        echo "Smoke tests passed! ‚úÖ"
                    '''
                }
            }
        }
    }
    
    post {
        always {
            // –û—á–∏—Å—Ç–∫–∞
            sh 'docker system prune -f || true'
            cleanWs()
        }
        success {
            script {
                sendTelegramNotification("‚úÖ Build #${BUILD_NUMBER} Successful!", "green")
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –≤ deployment
                sh '''
                    docker-compose exec backend node -e "
                        const fs = require('fs');
                        const package = JSON.parse(fs.readFileSync('/app/package.json'));
                        console.log('Deployed version:', package.version);
                    " || true
                '''
            }
        }
        failure {
            script {
                sendTelegramNotification("‚ùå Build #${BUILD_NUMBER} Failed!", "red")
            }
        }
        unstable {
            script {
                sendTelegramNotification("‚ö†Ô∏è Build #${BUILD_NUMBER} Unstable!", "yellow")
            }
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def sendTelegramNotification(message, color) {
    def emoji = color == "green" ? "‚úÖ" : color == "red" ? "‚ùå" : "‚ö†Ô∏è"
    def fullMessage = """
${emoji} <b>Calculator App CI/CD</b>
${message}
üìÅ <b>Project:</b> ${env.JOB_NAME}
üî® <b>Build:</b> #${env.BUILD_NUMBER}
üåø <b>Branch:</b> ${env.GIT_BRANCH}
üìù <b>Commit:</b> ${env.GIT_COMMIT?.take(8)}
    """.trim()
    
    def payload = [
        chat_id: "${TELEGRAM_CHAT_ID}",
        text: fullMessage,
        parse_mode: "HTML"
    ]
    
    def jsonPayload = new groovy.json.JsonBuilder(payload).toString()
    
    sh """
        curl -s -X POST https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage \
          -H "Content-Type: application/json" \
          -d '${jsonPayload}' || echo "Telegram notification failed"
    """
}